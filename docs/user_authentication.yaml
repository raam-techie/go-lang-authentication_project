openapi: 3.0.3
info:
  title: Merchant User Authentication Service
  description: |-
    This API provides endpoints for merchant user authentication, including user registration, login, and password management.
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: user
    description: Operations about user
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: A user can create account.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateUserResponse'
  /user/login:
    post:
      tags:
        - user
      summary: Logs user into the system
      description: 'User can login with exsistnig username and password'
      operationId: loginUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginUserRequest'
              
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginUserResponse'
        '400':
          description: Invalid username/password supplied
components:
  schemas:
    CreateUserRequest:
      type: object
      properties:
        username:
          type: string
          example: theUser
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    CreateUserResponse:
      type: object
      properties:
        status:
          type: string
          example: User account created
    LoginUserRequest:
      type: object
      properties:
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
    LoginUserResponse:
      type: object
      properties:
        userId:
          type: integer
          example: 1
        userMail:
          type: string
          example: john@email.com
        accessToken:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'